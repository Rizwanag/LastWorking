Maven Hand book.

<artifactId> -> name given to WAR or JAR ( project artifact library)
<pakaging> -> how a project should be packed (JAR or WAR) 3.2

1. mvn compile ---the compiled .class files in the target/classes directory.
2. mvn package ---The package goal will compile your Java code, run any tests, 
				  and finish by packaging the code up in a JAR file within the target directory. 
3. mvn install --- The install goal will compile, test, and package your project’s code and then copy it into the local dependency repository, 
				   ready for another project to reference it as a dependency.
				   

By default, all dependencies are scoped as compile dependencies. 
That is, they should be available at compile-time (and if you were building a WAR file, including in the /WEB-INF/libs folder of the WAR).

provided - Dependencies that are required for compiling the project code, but that will be provided at runtime by a container running the code (e.g., the Java Servlet API).

test - Dependencies that are used for compiling and running tests, but not required for building or running the project’s runtime code.

Spring Boot.
ananomous class -> pass code as parameter.